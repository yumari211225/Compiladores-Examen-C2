Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONSOLE
    DIVIDE
    DOT
    GLOBAL
    LOG
    MINUS
    OUT
    PRINTLN
    SINGLE_QUOTE
    SYSTEM
    TIMES
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations statements
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> declaration
Rule 4     declaration -> INT ID ASSIGN NUMBER SEMICOLON
Rule 5     declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON
Rule 6     declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON
Rule 7     statements -> statements statement
Rule 8     statements -> statement
Rule 9     statement -> if_statement
Rule 10    statement -> while_statement
Rule 11    statement -> for_statement
Rule 12    statement -> input_statement
Rule 13    statement -> increment_statement
Rule 14    statement -> assignment_statement
Rule 15    if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 16    condition -> expression AND expression
Rule 17    condition -> expression
Rule 18    expression -> simple_expression comparison_operator simple_expression
Rule 19    expression -> simple_expression
Rule 20    simple_expression -> ID
Rule 21    simple_expression -> NUMBER
Rule 22    simple_expression -> FLOAT_LITERAL
Rule 23    simple_expression -> STRING_LITERAL
Rule 24    comparison_operator -> EQ
Rule 25    comparison_operator -> GT
Rule 26    comparison_operator -> GE
Rule 27    comparison_operator -> LT
Rule 28    comparison_operator -> LE
Rule 29    comparison_operator -> NE
Rule 30    while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 31    for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
Rule 32    input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON
Rule 33    increment_statement -> ID PLUS PLUS SEMICOLON
Rule 34    assignment_statement -> ID ASSIGN expression SEMICOLON

Terminals, with rules where they appear

AND                  : 16
ASSIGN               : 4 5 6 34
COMMA                : 31
CONSOLE              : 
DIVIDE               : 
DOT                  : 
EQ                   : 24
FLOAT                : 5
FLOAT_LITERAL        : 5 22
FOR                  : 31
GE                   : 26
GLOBAL               : 
GT                   : 25
ID                   : 4 5 6 20 31 33 34
IF                   : 15
IN                   : 31
INPUT                : 32
INT                  : 4
LBRACE               : 15 30 31
LE                   : 28
LOG                  : 
LPAREN               : 15 30 31 31 32
LT                   : 27
MINUS                : 
NE                   : 29
NUMBER               : 4 21 31 31
OUT                  : 
PLUS                 : 33 33
PRINTLN              : 
RANGE                : 31
RBRACE               : 15 30 31
RPAREN               : 15 30 31 31 32
SEMICOLON            : 4 5 6 32 33 34
SINGLE_QUOTE         : 
STRING               : 6
STRING_LITERAL       : 6 23
SYSTEM               : 
TIMES                : 
VAR                  : 
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

assignment_statement : 14
comparison_operator  : 18
condition            : 15 30
declaration          : 2 3
declarations         : 1 2
expression           : 16 16 17 34
for_statement        : 11
if_statement         : 9
increment_statement  : 13
input_statement      : 12
program              : 0
simple_expression    : 18 18 19 32
statement            : 7 8
statements           : 1 7 15 30 31
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations statements
    (2) declarations -> . declarations declaration
    (3) declarations -> . declaration
    (4) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (5) declaration -> . FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON
    (6) declaration -> . STRING ID ASSIGN STRING_LITERAL SEMICOLON

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STRING          shift and go to state 6

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    declaration                    shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations . statements
    (2) declarations -> declarations . declaration
    (7) statements -> . statements statement
    (8) statements -> . statement
    (4) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (5) declaration -> . FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON
    (6) declaration -> . STRING ID ASSIGN STRING_LITERAL SEMICOLON
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STRING          shift and go to state 6
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statements                     shift and go to state 7
    declaration                    shift and go to state 8
    statement                      shift and go to state 9
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 3

    (3) declarations -> declaration .

    INT             reduce using rule 3 (declarations -> declaration .)
    FLOAT           reduce using rule 3 (declarations -> declaration .)
    STRING          reduce using rule 3 (declarations -> declaration .)
    IF              reduce using rule 3 (declarations -> declaration .)
    WHILE           reduce using rule 3 (declarations -> declaration .)
    FOR             reduce using rule 3 (declarations -> declaration .)
    INPUT           reduce using rule 3 (declarations -> declaration .)
    ID              reduce using rule 3 (declarations -> declaration .)


state 4

    (4) declaration -> INT . ID ASSIGN NUMBER SEMICOLON

    ID              shift and go to state 21


state 5

    (5) declaration -> FLOAT . ID ASSIGN FLOAT_LITERAL SEMICOLON

    ID              shift and go to state 22


state 6

    (6) declaration -> STRING . ID ASSIGN STRING_LITERAL SEMICOLON

    ID              shift and go to state 23


state 7

    (1) program -> declarations statements .
    (7) statements -> statements . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    $end            reduce using rule 1 (program -> declarations statements .)
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statement                      shift and go to state 24
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 8

    (2) declarations -> declarations declaration .

    INT             reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)
    STRING          reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)
    FOR             reduce using rule 2 (declarations -> declarations declaration .)
    INPUT           reduce using rule 2 (declarations -> declarations declaration .)
    ID              reduce using rule 2 (declarations -> declarations declaration .)


state 9

    (8) statements -> statement .

    IF              reduce using rule 8 (statements -> statement .)
    WHILE           reduce using rule 8 (statements -> statement .)
    FOR             reduce using rule 8 (statements -> statement .)
    INPUT           reduce using rule 8 (statements -> statement .)
    ID              reduce using rule 8 (statements -> statement .)
    $end            reduce using rule 8 (statements -> statement .)
    RBRACE          reduce using rule 8 (statements -> statement .)


state 10

    (33) increment_statement -> ID . PLUS PLUS SEMICOLON
    (34) assignment_statement -> ID . ASSIGN expression SEMICOLON

    PLUS            shift and go to state 25
    ASSIGN          shift and go to state 26


state 11

    (9) statement -> if_statement .

    IF              reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    INPUT           reduce using rule 9 (statement -> if_statement .)
    ID              reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    RBRACE          reduce using rule 9 (statement -> if_statement .)


state 12

    (10) statement -> while_statement .

    IF              reduce using rule 10 (statement -> while_statement .)
    WHILE           reduce using rule 10 (statement -> while_statement .)
    FOR             reduce using rule 10 (statement -> while_statement .)
    INPUT           reduce using rule 10 (statement -> while_statement .)
    ID              reduce using rule 10 (statement -> while_statement .)
    $end            reduce using rule 10 (statement -> while_statement .)
    RBRACE          reduce using rule 10 (statement -> while_statement .)


state 13

    (11) statement -> for_statement .

    IF              reduce using rule 11 (statement -> for_statement .)
    WHILE           reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    INPUT           reduce using rule 11 (statement -> for_statement .)
    ID              reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    RBRACE          reduce using rule 11 (statement -> for_statement .)


state 14

    (12) statement -> input_statement .

    IF              reduce using rule 12 (statement -> input_statement .)
    WHILE           reduce using rule 12 (statement -> input_statement .)
    FOR             reduce using rule 12 (statement -> input_statement .)
    INPUT           reduce using rule 12 (statement -> input_statement .)
    ID              reduce using rule 12 (statement -> input_statement .)
    $end            reduce using rule 12 (statement -> input_statement .)
    RBRACE          reduce using rule 12 (statement -> input_statement .)


state 15

    (13) statement -> increment_statement .

    IF              reduce using rule 13 (statement -> increment_statement .)
    WHILE           reduce using rule 13 (statement -> increment_statement .)
    FOR             reduce using rule 13 (statement -> increment_statement .)
    INPUT           reduce using rule 13 (statement -> increment_statement .)
    ID              reduce using rule 13 (statement -> increment_statement .)
    $end            reduce using rule 13 (statement -> increment_statement .)
    RBRACE          reduce using rule 13 (statement -> increment_statement .)


state 16

    (14) statement -> assignment_statement .

    IF              reduce using rule 14 (statement -> assignment_statement .)
    WHILE           reduce using rule 14 (statement -> assignment_statement .)
    FOR             reduce using rule 14 (statement -> assignment_statement .)
    INPUT           reduce using rule 14 (statement -> assignment_statement .)
    ID              reduce using rule 14 (statement -> assignment_statement .)
    $end            reduce using rule 14 (statement -> assignment_statement .)
    RBRACE          reduce using rule 14 (statement -> assignment_statement .)


state 17

    (15) if_statement -> IF . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 27


state 18

    (30) while_statement -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 28


state 19

    (31) for_statement -> FOR . LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 29


state 20

    (32) input_statement -> INPUT . LPAREN simple_expression RPAREN SEMICOLON

    LPAREN          shift and go to state 30


state 21

    (4) declaration -> INT ID . ASSIGN NUMBER SEMICOLON

    ASSIGN          shift and go to state 31


state 22

    (5) declaration -> FLOAT ID . ASSIGN FLOAT_LITERAL SEMICOLON

    ASSIGN          shift and go to state 32


state 23

    (6) declaration -> STRING ID . ASSIGN STRING_LITERAL SEMICOLON

    ASSIGN          shift and go to state 33


state 24

    (7) statements -> statements statement .

    IF              reduce using rule 7 (statements -> statements statement .)
    WHILE           reduce using rule 7 (statements -> statements statement .)
    FOR             reduce using rule 7 (statements -> statements statement .)
    INPUT           reduce using rule 7 (statements -> statements statement .)
    ID              reduce using rule 7 (statements -> statements statement .)
    $end            reduce using rule 7 (statements -> statements statement .)
    RBRACE          reduce using rule 7 (statements -> statements statement .)


state 25

    (33) increment_statement -> ID PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 34


state 26

    (34) assignment_statement -> ID ASSIGN . expression SEMICOLON
    (18) expression -> . simple_expression comparison_operator simple_expression
    (19) expression -> . simple_expression
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    expression                     shift and go to state 36
    simple_expression              shift and go to state 37

state 27

    (15) if_statement -> IF LPAREN . condition RPAREN LBRACE statements RBRACE
    (16) condition -> . expression AND expression
    (17) condition -> . expression
    (18) expression -> . simple_expression comparison_operator simple_expression
    (19) expression -> . simple_expression
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    condition                      shift and go to state 41
    expression                     shift and go to state 42
    simple_expression              shift and go to state 37

state 28

    (30) while_statement -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (16) condition -> . expression AND expression
    (17) condition -> . expression
    (18) expression -> . simple_expression comparison_operator simple_expression
    (19) expression -> . simple_expression
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    condition                      shift and go to state 43
    expression                     shift and go to state 42
    simple_expression              shift and go to state 37

state 29

    (31) for_statement -> FOR LPAREN . ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    ID              shift and go to state 44


state 30

    (32) input_statement -> INPUT LPAREN . simple_expression RPAREN SEMICOLON
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    simple_expression              shift and go to state 45

state 31

    (4) declaration -> INT ID ASSIGN . NUMBER SEMICOLON

    NUMBER          shift and go to state 46


state 32

    (5) declaration -> FLOAT ID ASSIGN . FLOAT_LITERAL SEMICOLON

    FLOAT_LITERAL   shift and go to state 47


state 33

    (6) declaration -> STRING ID ASSIGN . STRING_LITERAL SEMICOLON

    STRING_LITERAL  shift and go to state 48


state 34

    (33) increment_statement -> ID PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 49


state 35

    (20) simple_expression -> ID .

    EQ              reduce using rule 20 (simple_expression -> ID .)
    GT              reduce using rule 20 (simple_expression -> ID .)
    GE              reduce using rule 20 (simple_expression -> ID .)
    LT              reduce using rule 20 (simple_expression -> ID .)
    LE              reduce using rule 20 (simple_expression -> ID .)
    NE              reduce using rule 20 (simple_expression -> ID .)
    SEMICOLON       reduce using rule 20 (simple_expression -> ID .)
    AND             reduce using rule 20 (simple_expression -> ID .)
    RPAREN          reduce using rule 20 (simple_expression -> ID .)


state 36

    (34) assignment_statement -> ID ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 50


state 37

    (18) expression -> simple_expression . comparison_operator simple_expression
    (19) expression -> simple_expression .
    (24) comparison_operator -> . EQ
    (25) comparison_operator -> . GT
    (26) comparison_operator -> . GE
    (27) comparison_operator -> . LT
    (28) comparison_operator -> . LE
    (29) comparison_operator -> . NE

    SEMICOLON       reduce using rule 19 (expression -> simple_expression .)
    AND             reduce using rule 19 (expression -> simple_expression .)
    RPAREN          reduce using rule 19 (expression -> simple_expression .)
    EQ              shift and go to state 52
    GT              shift and go to state 53
    GE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    NE              shift and go to state 57

    comparison_operator            shift and go to state 51

state 38

    (21) simple_expression -> NUMBER .

    EQ              reduce using rule 21 (simple_expression -> NUMBER .)
    GT              reduce using rule 21 (simple_expression -> NUMBER .)
    GE              reduce using rule 21 (simple_expression -> NUMBER .)
    LT              reduce using rule 21 (simple_expression -> NUMBER .)
    LE              reduce using rule 21 (simple_expression -> NUMBER .)
    NE              reduce using rule 21 (simple_expression -> NUMBER .)
    SEMICOLON       reduce using rule 21 (simple_expression -> NUMBER .)
    AND             reduce using rule 21 (simple_expression -> NUMBER .)
    RPAREN          reduce using rule 21 (simple_expression -> NUMBER .)


state 39

    (22) simple_expression -> FLOAT_LITERAL .

    EQ              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    GT              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    GE              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    LT              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    LE              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    NE              reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    AND             reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 22 (simple_expression -> FLOAT_LITERAL .)


state 40

    (23) simple_expression -> STRING_LITERAL .

    EQ              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    GT              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    GE              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    LT              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    LE              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    NE              reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    AND             reduce using rule 23 (simple_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 23 (simple_expression -> STRING_LITERAL .)


state 41

    (15) if_statement -> IF LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 58


state 42

    (16) condition -> expression . AND expression
    (17) condition -> expression .

    AND             shift and go to state 59
    RPAREN          reduce using rule 17 (condition -> expression .)


state 43

    (30) while_statement -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 60


state 44

    (31) for_statement -> FOR LPAREN ID . IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    IN              shift and go to state 61


state 45

    (32) input_statement -> INPUT LPAREN simple_expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 62


state 46

    (4) declaration -> INT ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 63


state 47

    (5) declaration -> FLOAT ID ASSIGN FLOAT_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 64


state 48

    (6) declaration -> STRING ID ASSIGN STRING_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 65


state 49

    (33) increment_statement -> ID PLUS PLUS SEMICOLON .

    IF              reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    FOR             reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    INPUT           reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    ID              reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    $end            reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)
    RBRACE          reduce using rule 33 (increment_statement -> ID PLUS PLUS SEMICOLON .)


state 50

    (34) assignment_statement -> ID ASSIGN expression SEMICOLON .

    IF              reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    INPUT           reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMICOLON .)


state 51

    (18) expression -> simple_expression comparison_operator . simple_expression
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    simple_expression              shift and go to state 66

state 52

    (24) comparison_operator -> EQ .

    ID              reduce using rule 24 (comparison_operator -> EQ .)
    NUMBER          reduce using rule 24 (comparison_operator -> EQ .)
    FLOAT_LITERAL   reduce using rule 24 (comparison_operator -> EQ .)
    STRING_LITERAL  reduce using rule 24 (comparison_operator -> EQ .)


state 53

    (25) comparison_operator -> GT .

    ID              reduce using rule 25 (comparison_operator -> GT .)
    NUMBER          reduce using rule 25 (comparison_operator -> GT .)
    FLOAT_LITERAL   reduce using rule 25 (comparison_operator -> GT .)
    STRING_LITERAL  reduce using rule 25 (comparison_operator -> GT .)


state 54

    (26) comparison_operator -> GE .

    ID              reduce using rule 26 (comparison_operator -> GE .)
    NUMBER          reduce using rule 26 (comparison_operator -> GE .)
    FLOAT_LITERAL   reduce using rule 26 (comparison_operator -> GE .)
    STRING_LITERAL  reduce using rule 26 (comparison_operator -> GE .)


state 55

    (27) comparison_operator -> LT .

    ID              reduce using rule 27 (comparison_operator -> LT .)
    NUMBER          reduce using rule 27 (comparison_operator -> LT .)
    FLOAT_LITERAL   reduce using rule 27 (comparison_operator -> LT .)
    STRING_LITERAL  reduce using rule 27 (comparison_operator -> LT .)


state 56

    (28) comparison_operator -> LE .

    ID              reduce using rule 28 (comparison_operator -> LE .)
    NUMBER          reduce using rule 28 (comparison_operator -> LE .)
    FLOAT_LITERAL   reduce using rule 28 (comparison_operator -> LE .)
    STRING_LITERAL  reduce using rule 28 (comparison_operator -> LE .)


state 57

    (29) comparison_operator -> NE .

    ID              reduce using rule 29 (comparison_operator -> NE .)
    NUMBER          reduce using rule 29 (comparison_operator -> NE .)
    FLOAT_LITERAL   reduce using rule 29 (comparison_operator -> NE .)
    STRING_LITERAL  reduce using rule 29 (comparison_operator -> NE .)


state 58

    (15) if_statement -> IF LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 67


state 59

    (16) condition -> expression AND . expression
    (18) expression -> . simple_expression comparison_operator simple_expression
    (19) expression -> . simple_expression
    (20) simple_expression -> . ID
    (21) simple_expression -> . NUMBER
    (22) simple_expression -> . FLOAT_LITERAL
    (23) simple_expression -> . STRING_LITERAL

    ID              shift and go to state 35
    NUMBER          shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    STRING_LITERAL  shift and go to state 40

    expression                     shift and go to state 68
    simple_expression              shift and go to state 37

state 60

    (30) while_statement -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 69


state 61

    (31) for_statement -> FOR LPAREN ID IN . RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    RANGE           shift and go to state 70


state 62

    (32) input_statement -> INPUT LPAREN simple_expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 71


state 63

    (4) declaration -> INT ID ASSIGN NUMBER SEMICOLON .

    INT             reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    FLOAT           reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    STRING          reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    FOR             reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    INPUT           reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 4 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)


state 64

    (5) declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .

    INT             reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    STRING          reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    IF              reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    WHILE           reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    FOR             reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    INPUT           reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)
    ID              reduce using rule 5 (declaration -> FLOAT ID ASSIGN FLOAT_LITERAL SEMICOLON .)


state 65

    (6) declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .

    INT             reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    STRING          reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    IF              reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    FOR             reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    INPUT           reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)
    ID              reduce using rule 6 (declaration -> STRING ID ASSIGN STRING_LITERAL SEMICOLON .)


state 66

    (18) expression -> simple_expression comparison_operator simple_expression .

    SEMICOLON       reduce using rule 18 (expression -> simple_expression comparison_operator simple_expression .)
    AND             reduce using rule 18 (expression -> simple_expression comparison_operator simple_expression .)
    RPAREN          reduce using rule 18 (expression -> simple_expression comparison_operator simple_expression .)


state 67

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE . statements RBRACE
    (7) statements -> . statements statement
    (8) statements -> . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statements                     shift and go to state 72
    statement                      shift and go to state 9
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 68

    (16) condition -> expression AND expression .

    RPAREN          reduce using rule 16 (condition -> expression AND expression .)


state 69

    (30) while_statement -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (7) statements -> . statements statement
    (8) statements -> . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statements                     shift and go to state 73
    statement                      shift and go to state 9
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 70

    (31) for_statement -> FOR LPAREN ID IN RANGE . LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 74


state 71

    (32) input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .

    IF              reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    FOR             reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    INPUT           reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    ID              reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    $end            reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 32 (input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON .)


state 72

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE statements . RBRACE
    (7) statements -> statements . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    RBRACE          shift and go to state 75
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statement                      shift and go to state 24
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 73

    (30) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE
    (7) statements -> statements . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    RBRACE          shift and go to state 76
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statement                      shift and go to state 24
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 74

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN . NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    NUMBER          shift and go to state 77


state 75

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .

    IF              reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)


state 76

    (30) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    IF              reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 30 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 77

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER . COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    COMMA           shift and go to state 78


state 78

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA . NUMBER RPAREN RPAREN LBRACE statements RBRACE

    NUMBER          shift and go to state 79


state 79

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER . RPAREN RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 80


state 80

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 81


state 81

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 82


state 82

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE . statements RBRACE
    (7) statements -> . statements statement
    (8) statements -> . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statements                     shift and go to state 83
    statement                      shift and go to state 9
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 83

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements . RBRACE
    (7) statements -> statements . statement
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . input_statement
    (13) statement -> . increment_statement
    (14) statement -> . assignment_statement
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (30) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (31) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (32) input_statement -> . INPUT LPAREN simple_expression RPAREN SEMICOLON
    (33) increment_statement -> . ID PLUS PLUS SEMICOLON
    (34) assignment_statement -> . ID ASSIGN expression SEMICOLON

    RBRACE          shift and go to state 84
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    INPUT           shift and go to state 20
    ID              shift and go to state 10

    statement                      shift and go to state 24
    if_statement                   shift and go to state 11
    while_statement                shift and go to state 12
    for_statement                  shift and go to state 13
    input_statement                shift and go to state 14
    increment_statement            shift and go to state 15
    assignment_statement           shift and go to state 16

state 84

    (31) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .

    IF              reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 31 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)

